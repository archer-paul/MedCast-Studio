"""
Script de configuration pour l'environnement GCP et les API
"""

import os
import json
import logging
from pathlib import Path
from google.cloud import texttospeech
import google.generativeai as genai
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

logger = logging.getLogger(__name__)

def setup_gcp_credentials():
    """
    Configure les credentials GCP
    """
    print("=== CONFIGURATION DES CREDENTIALS GCP ===\n")
    
    # V√©rifier si les credentials sont d√©j√† configur√©s
    credentials_path = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    if credentials_path:
        # Convertir les chemins relatifs en chemins absolus
        if not os.path.isabs(credentials_path):
            credentials_path = os.path.abspath(credentials_path)
        
        if os.path.exists(credentials_path):
            # Mettre √† jour la variable d'environnement avec le chemin absolu
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path
            print(f"‚úì Credentials trouv√©s: {credentials_path}")
            return True
        else:
            print(f"‚úó Fichier credentials introuvable: {credentials_path}")
    
    print("Credentials GCP non trouv√©s.")
    print("Vous devez configurer l'authentification GCP de l'une des fa√ßons suivantes:\n")
    
    print("OPTION 1: Service Account Key (Recommand√©)")
    print("1. Aller sur https://console.cloud.google.com/")
    print("2. S√©lectionner votre projet")
    print("3. IAM & Admin > Service Accounts")
    print("4. Cr√©er un service account avec les r√¥les:")
    print("   - Cloud Text-to-Speech API User")
    print("   - Generative AI User")
    print("5. T√©l√©charger la cl√© JSON")
    print("6. D√©finir la variable d'environnement:")
    print("   export GOOGLE_APPLICATION_CREDENTIALS='/path/to/your/key.json'")
    
    print("\nOPTION 2: Application Default Credentials")
    print("1. Installer gcloud CLI")
    print("2. Ex√©cuter: gcloud auth application-default login")
    
    print("\nOPTION 3: Variables d'environnement")
    print("D√©finir GOOGLE_API_KEY pour Gemini")
    
    # Demander le chemin du fichier de credentials
    credentials_file = input("\nChemin vers votre fichier de credentials JSON (ou Enter pour passer): ").strip()
    
    if credentials_file and os.path.exists(credentials_file):
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_file
        print(f"‚úì Credentials configur√©s: {credentials_file}")
        return True
    
    return False

def setup_gemini_api():
    """
    Configure l'API Gemini
    """
    print("\n=== CONFIGURATION DE L'API GEMINI ===\n")
    
    api_key = os.getenv('GOOGLE_API_KEY')
    if api_key:
        print("‚úì GOOGLE_API_KEY trouv√©e")
        try:
            genai.configure(api_key=api_key)
            # Test simple
            model = genai.GenerativeModel('gemini-1.5-pro')
            response = model.generate_content("Test de connexion")
            print("‚úì Connexion Gemini r√©ussie")
            return True
        except Exception as e:
            print(f"‚úó Erreur de connexion Gemini: {e}")
            return False
    
    print("GOOGLE_API_KEY non trouv√©e.")
    print("Pour obtenir une cl√© API Gemini:")
    print("1. Aller sur https://aistudio.google.com/app/apikey")
    print("2. Cr√©er une nouvelle cl√© API")
    print("3. D√©finir la variable d'environnement:")
    print("   export GOOGLE_API_KEY='your_api_key_here'")
    
    api_key = input("\nEntrez votre cl√© API Gemini (ou Enter pour passer): ").strip()
    if api_key:
        os.environ['GOOGLE_API_KEY'] = api_key
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel('gemini-1.5-pro')
            response = model.generate_content("Test de connexion")
            print("‚úì Connexion Gemini r√©ussie")
            return True
        except Exception as e:
            print(f"‚úó Erreur de connexion Gemini: {e}")
            return False
    
    return False

def test_text_to_speech():
    """
    Teste l'API Text-to-Speech
    """
    print("\n=== TEST DE L'API TEXT-TO-SPEECH ===\n")
    
    try:
        client = texttospeech.TextToSpeechClient()
        
        # Test de liste des voix
        voices_request = texttospeech.ListVoicesRequest(language_code="fr-FR")
        voices = client.list_voices(request=voices_request)
        
        print(f"‚úì API Text-to-Speech accessible")
        print(f"‚úì {len(voices.voices)} voix fran√ßaises disponibles")
        
        # Afficher quelques voix
        for voice in voices.voices[:3]:
            gender_name = voice.ssml_gender.name if hasattr(voice.ssml_gender, 'name') else str(voice.ssml_gender)
            print(f"  - {voice.name} ({gender_name})")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur API Text-to-Speech: {e}")
        return False

def check_system_dependencies():
    """
    V√©rifie les d√©pendances syst√®me
    """
    print("\n=== V√âRIFICATION DES D√âPENDANCES SYST√àME ===\n")
    
    dependencies = {
        'LaTeX (pdflatex)': 'pdflatex --version',
        'FFmpeg (pour audio)': 'ffmpeg -version'
    }
    
    results = {}
    
    for dep_name, command in dependencies.items():
        try:
            import subprocess
            result = subprocess.run(command.split(), capture_output=True, timeout=10)
            if result.returncode == 0:
                print(f"‚úì {dep_name} disponible")
                results[dep_name] = True
            else:
                print(f"‚úó {dep_name} non trouv√©")
                results[dep_name] = False
        except:
            print(f"‚úó {dep_name} non trouv√©")
            results[dep_name] = False
    
    if not results.get('LaTeX (pdflatex)', False):
        print("\nPour installer LaTeX:")
        print("  Ubuntu/Debian: sudo apt-get install texlive-latex-extra")
        print("  macOS: brew install mactex")
        print("  Windows: https://miktex.org/")
    
    if not results.get('FFmpeg (pour audio)', False):
        print("\nPour installer FFmpeg:")
        print("  Ubuntu/Debian: sudo apt-get install ffmpeg")
        print("  macOS: brew install ffmpeg")
        print("  Windows: https://ffmpeg.org/download.html")
    
    return results

def create_env_file():
    """
    Cr√©e un fichier .env d'exemple
    """
    env_content = """# Configuration pour le g√©n√©rateur de capsules

# Cl√© API Gemini (obligatoire)
GOOGLE_API_KEY=your_gemini_api_key_here

# Chemin vers le fichier de credentials GCP (optionnel si gcloud configur√©)
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json

# Configuration du logging (optionnel)
LOG_LEVEL=INFO
"""
    
    env_file = Path('.env')
    if not env_file.exists():
        with open(env_file, 'w') as f:
            f.write(env_content)
        print(f"\n‚úì Fichier .env cr√©√©: {env_file}")
        print("√âditez ce fichier avec vos vraies valeurs")
    else:
        print(f"\n‚úì Fichier .env existe d√©j√†: {env_file}")

def main():
    """
    Script principal de configuration
    """
    print("G√âN√âRATEUR DE CAPSULES D'APPRENTISSAGE")
    print("Configuration de l'environnement GCP")
    print("=" * 50)
    
    # V√©rifier les d√©pendances syst√®me
    deps_ok = check_system_dependencies()
    
    # Configurer GCP
    gcp_ok = setup_gcp_credentials()
    
    # Configurer Gemini
    gemini_ok = setup_gemini_api()
    
    # Tester Text-to-Speech
    tts_ok = test_text_to_speech() if gcp_ok else False
    
    # Cr√©er le fichier .env
    create_env_file()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("R√âSUM√â DE LA CONFIGURATION")
    print("=" * 50)
    
    print(f"GCP Credentials: {'‚úì' if gcp_ok else '‚úó'}")
    print(f"API Gemini: {'‚úì' if gemini_ok else '‚úó'}")
    print(f"API Text-to-Speech: {'‚úì' if tts_ok else '‚úó'}")
    print(f"LaTeX: {'‚úì' if deps_ok.get('LaTeX (pdflatex)', False) else '‚úó'}")
    print(f"FFmpeg: {'‚úì' if deps_ok.get('FFmpeg (pour audio)', False) else '‚úó'}")
    
    if gemini_ok and (gcp_ok or tts_ok):
        print("\nüéâ Configuration r√©ussie ! Vous pouvez lancer le g√©n√©rateur.")
        print("\nCommandes pour d√©marrer:")
        print("  python main.py votre_fichier.xlsx")
        print("  python main.py votre_fichier.xlsx --single 1  # Pour tester une seule ligne")
    else:
        print("\n‚ö†Ô∏è  Configuration incompl√®te.")
        print("Le programme fonctionnera partiellement selon les services disponibles.")
        
        if not gemini_ok:
            print("- Sans Gemini: pas de g√©n√©ration de contenu")
        if not gcp_ok and not tts_ok:
            print("- Sans Text-to-Speech: pas de g√©n√©ration audio")

if __name__ == "__main__":
    main()